name: Test

on: [push, pull_request, workflow_dispatch]

permissions: {}

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  build-package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: hynek/build-and-inspect-python-package@v2
        id: baipp

    outputs:
      # Used to define the matrix for tests below. The value is based on
      # packaging metadata (Trove classifiers).
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}

  test:
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.build-package.outputs.python-versions) }}
        os: [windows-latest, ubuntu-latest]

    env:
      PYTHON_VERSION: ${{ matrix.python-version }}

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - if: ${{ matrix.os != 'windows-latest' }}
        run: |
          ls -l
          tar xf dist/*.tar.gz --strip-components=1
          ls -l
          ls -l src
          rm -rf src
          ls -l

      - if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: |
          dir
          dir dist
          $archive = Get-ChildItem dist\*.tar.gz | Select-Object -First 1
          if ($archive) {
              tar xf $archive --strip-components=1
          }
          dir
          dir src
          Remove-Item -Recurse -Force src
          dir

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Set PYTHON_GIL
        if: endsWith(matrix.python-version, 't')
        run: |
          echo "PYTHON_GIL=0" >> "$GITHUB_ENV"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Tox tests (non-Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          uvx --python "${PYTHON_VERSION}" --with tox-uv tox run --installpkg dist/*.whl -e py

      - name: Tox tests (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          uvx --python "${PYTHON_VERSION}" --with tox-uv tox run --installpkg dist\*.whl -e py

      - name: Test CLI
        run: |
          uvx --python "${PYTHON_VERSION}" --with tox-uv tox run --installpkg "*.whl" -e cli

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          flags: ${{ matrix.os }}
          name: ${{ matrix.os }} Python ${{ matrix.python-version }}

  success:
    needs: test
    runs-on: ubuntu-latest
    name: Test successful
    steps:
      - name: Success
        run: echo Test successful
